import { CropHealthService } from './cropHealthService';
import { AudioService } from './audioService';
import { ImageProcessingService } from './imageProcessingService';
import { LoggingService } from './loggingService';
import { MessageMedia } from 'whatsapp-web.js';

export interface HealthAnalysisResult {
  isHealthy: boolean;
  confidence: number;
  audioMessage: MessageMedia | null;
  textMessage: string;
  recommendation?: string;
}

/**
 * Service sp√©cialis√© pour l'analyse de sant√© des cultures (Option 1)
 */
export class HealthAnalysisService {
  private cropHealthService: CropHealthService;
  private audioService: AudioService;
  private imageProcessingService: ImageProcessingService;
  private logger: LoggingService;

  constructor() {
    this.cropHealthService = new CropHealthService();
    this.audioService = new AudioService();
    this.imageProcessingService = new ImageProcessingService();
    this.logger = new LoggingService();
  }

  /**
   * Analyser la sant√© d'une culture √† partir d'une image
   */
  async analyzeCropHealth(imageBuffer: Buffer, userId: string): Promise<HealthAnalysisResult> {
    try {
      console.log(`üåæ D√©but de l'analyse de sant√© pour ${userId}`);
      
      // 1. Pr√©traitement de l'image
      const imageOptimization = await this.imageProcessingService.optimizeForAnalysis(imageBuffer);
      
      if (!imageOptimization.success) {
        return {
          isHealthy: false,
          confidence: 0,
          audioMessage: null,
          textMessage: `‚ùå Probl√®me avec l'image: ${imageOptimization.error}\n\nüì∑ Veuillez envoyer une nouvelle photo plus claire.`,
          recommendation: "Am√©liorer la qualit√© de l'image"
        };
      }

      // 2. Analyse binaire avec OpenEPI
      const binaryResult = await this.cropHealthService.analyzeBinaryHealth(
        imageOptimization.processedImage!
      );

      console.log(`üìä R√©sultat binaire: ${binaryResult.prediction} (${(binaryResult.confidence * 100).toFixed(1)}%)`);

      // 3. D√©terminer le r√©sultat et l'audio appropri√©
      const isHealthy = binaryResult.prediction === 'healthy';
      const confidence = binaryResult.confidence;

      // 4. Obtenir l'audio appropri√©
      let audioMessage: MessageMedia | null = null;
      if (isHealthy) {
        audioMessage = await this.audioService.getHealthyCropAudio();
      } else {
        audioMessage = await this.audioService.getDiseasedCropAudio();
      }

      // 5. G√©n√©rer le message texte
      const textMessage = this.generateHealthMessage(isHealthy, confidence);

      // 6. Logger l'analyse
      this.logger.logBotActivity(userId, 'Health Analysis', {
        prediction: binaryResult.prediction,
        confidence: confidence,
        timestamp: new Date().toISOString()
      });

      return {
        isHealthy,
        confidence,
        audioMessage,
        textMessage,
        recommendation: this.generateRecommendation(isHealthy, confidence)
      };

    } catch (error: any) {
      console.error('‚ùå Erreur lors de l\'analyse de sant√©:', error.message);
      
      this.logger.logServiceError('HEALTH_ANALYSIS', error.message, userId);
      
      return {
        isHealthy: false,
        confidence: 0,
        audioMessage: null,
        textMessage: "‚ùå Une erreur s'est produite lors de l'analyse. Veuillez r√©essayer avec une nouvelle photo.",
        recommendation: "R√©essayer l'analyse"
      };
    }
  }

  /**
   * G√©n√©rer le message texte selon le r√©sultat
   */
  private generateHealthMessage(isHealthy: boolean, confidence: number): string {
    const confidencePercent = (confidence * 100).toFixed(1);
    
    if (isHealthy) {
      return `‚úÖ **CULTURE SAINE**

üåæ **R√©sultat**: Votre culture semble √™tre en bonne sant√©
üìä **Confiance**: ${confidencePercent}%
‚è∞ **Analys√©**: ${new Date().toLocaleString()}

üéØ **Recommandations**:
‚Ä¢ Continuez vos pratiques actuelles
‚Ä¢ Surveillez r√©guli√®rement l'√©volution
‚Ä¢ Maintenez les conditions optimales

üí° Tapez 'menu' pour revenir au menu principal`;
    } else {
      return `‚ö†Ô∏è **ATTENTION REQUISE**

üåæ **R√©sultat**: Votre culture n√©cessite une attention
üìä **Confiance**: ${confidencePercent}%
‚è∞ **Analys√©**: ${new Date().toLocaleString()}

üö® **Actions recommand√©es**:
‚Ä¢ Examinez la culture de plus pr√®s
‚Ä¢ Consultez un expert agricole si n√©cessaire
‚Ä¢ Surveillez l'√©volution quotidiennement
‚Ä¢ Envisagez un traitement pr√©ventif

üí° Tapez 'menu' pour revenir au menu principal`;
    }
  }

  /**
   * G√©n√©rer des recommandations selon le r√©sultat
   */
  private generateRecommendation(isHealthy: boolean, confidence: number): string {
    if (isHealthy) {
      if (confidence > 0.8) {
        return "Culture en excellente sant√© - continuez vos pratiques";
      } else {
        return "Culture saine mais surveillez l'√©volution";
      }
    } else {
      if (confidence > 0.8) {
        return "Probl√®me d√©tect√© avec forte confiance - action imm√©diate recommand√©e";
      } else {
        return "Probl√®me potentiel d√©tect√© - surveillance renforc√©e recommand√©e";
      }
    }
  }

  /**
   * V√©rifier le statut du service
   */
  async checkServiceStatus(): Promise<{ status: string; error?: string }> {
    try {
      const cropHealthStatus = await this.cropHealthService.checkStatus();
      const audioStatus = this.audioService.checkAudioFiles();
      
      if (cropHealthStatus.status !== 'healthy') {
        return {
          status: 'error',
          error: 'Service OpenEPI non disponible'
        };
      }
      
      if (!audioStatus.available) {
        return {
          status: 'warning',
          error: `Fichiers audio manquants: ${audioStatus.missing.join(', ')}`
        };
      }
      
      return { status: 'healthy' };
    } catch (error: any) {
      return {
        status: 'error',
        error: error.message
      };
    }
  }
}
